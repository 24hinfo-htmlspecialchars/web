generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  firstName     String?
  lastName      String?
  name          String?
  email         String       @unique
  emailVerified DateTime?
  password      String?
  image         String?
  userType      UserType?    @relation(fields: [userTypeId], references: [id])
  userTypeId    String?

  accounts      Account[]
  sessions      Session[]
  favoris       FavorisDe[] // lieux favoris

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserType {
  id          String  @id @default(cuid())
  label       String
  name        String
  description String?

  users       User[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Theme {
  theme_id String @id @default(cuid())
  label    String

  lieux    Lieu[]
}

model Lieu {
  lieu_id     String       @id @default(cuid())
  label       String
  adresse     String
  latitude    String
  longitude   String
  notes       Int

  themeId     String
  theme       Theme        @relation(fields: [themeId], references: [theme_id], onDelete: Cascade)

  audioId     String?      @unique
  audio       Audioia?     @relation(fields: [audioId], references: [id])

  liens       Lien[]
  paragraphes Paragraphe[]
  favoris     FavorisDe[]
  images      ImageLieu[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Audioia {
  id      String @id @default(cuid())
  url     String
  label   String

  lieu    Lieu?  @relation
}

model Lien {
  id      String @id @default(cuid())
  lien    String
  lieuId  String
  lieu    Lieu   @relation(fields: [lieuId], references: [lieu_id], onDelete: Cascade)
}

model Paragraphe {
  id              String @id @default(cuid())
  description_md  String
  lieuId          String
  lieu            Lieu   @relation(fields: [lieuId], references: [lieu_id], onDelete: Cascade)
}

model ImageLieu {
  id              String @id @default(cuid())
  imagepath       String
  lieuId          String
  
  lieu            Lieu   @relation(fields: [lieuId], references: [lieu_id], onDelete: Cascade)
}



model FavorisDe {
  userId String
  lieuId String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lieu   Lieu @relation(fields: [lieuId], references: [lieu_id], onDelete: Cascade)

  @@id([userId, lieuId])
}
